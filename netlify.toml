[build.environment]
HUGO_VERSION = "0.143.1"
NODE_VERSION = "22"
TZ = "America/Arizona"

[build]
publish = "public"
# Auto-publish immediately after successful build
command = """
echo "🔍 Netlify Build Environment Debug:"
echo "  NETLIFY_CONTEXT: $NETLIFY_CONTEXT"
echo "  ENVIRONMENT: $ENVIRONMENT"
echo "  BRANCH: $BRANCH"
echo "  AUTO_PUBLISH: Enabled for stage environment"
echo ""

# Determine environment based on context and branch
if [ "$NETLIFY_CONTEXT" = "production" ] && [ "$BRANCH" = "production" ]; then
  echo "🎯 Running production build (production branch)..."
  pnpm run build:prod
elif [ "$NETLIFY_CONTEXT" = "branch-deploy" ] && [ "$BRANCH" = "main" ]; then
  echo "🎯 Running stage build (main branch deploy) - AUTO-PUBLISH"
  pnpm run build:stage
elif [ "$NETLIFY_CONTEXT" = "branch-deploy" ] && [ "$BRANCH" = "stage" ]; then
  echo "🎯 Running stage build (stage branch) - AUTO-PUBLISH"
  pnpm run build:stage
else
  echo "🎯 Running stage build (default) - AUTO-PUBLISH"
  pnpm run build:stage
fi

echo "✅ Build completed - ready for auto-publish"
"""

# Production deploys only from production branch (manual review)
[context.production]
command = """
echo "🎯 Production context triggered..."
pnpm run build:prod
"""
environment = { ENVIRONMENT = "production" }

# Branch deploys - main and other branches use stage (AUTO-PUBLISH)
[context.branch-deploy]
command = """
echo "🎯 Branch deploy context for branch: $BRANCH (AUTO-PUBLISH enabled)"
if [ "$BRANCH" = "main" ]; then
  echo "🎯 Main branch deploy - using stage build with auto-publish..."
  pnpm run build:stage
elif [ "$BRANCH" = "stage" ]; then
  echo "🎯 Stage branch deploy with auto-publish..."
  pnpm run build:stage
else
  echo "🎯 Other branch ($BRANCH) - using stage build with auto-publish..."
  pnpm run build:stage
fi
echo "✅ Stage build ready for immediate publishing"
"""
environment = { ENVIRONMENT = "stage" }

# Deploy previews use stage (AUTO-PUBLISH)
[context.deploy-preview]
command = """
echo "🎯 Deploy preview context - auto-publish enabled..."
pnpm run build:stage
"""
environment = { ENVIRONMENT = "stage" }
