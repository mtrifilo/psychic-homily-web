name: Deploy to Stage

on:
  push:
    branches: [main]

jobs:
  # Stage 1: Backend Stage Deployment
  deploy-backend-stage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Build Binary
        working-directory: ./backend
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-w -s" \
            -o psychic-homily-stage \
            ./cmd/server

      - name: Setup Stage Infrastructure
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Check if directory exists and try to create without sudo first
            if [ ! -d /opt/psychic-homily-stage ]; then
              # Try without sudo first
              mkdir -p /opt/psychic-homily-stage/{scripts,db/migrations,backups} 2>/dev/null || {
                # If that fails, we need sudo - configure passwordless sudo for deploy user
                echo "Need sudo access to create /opt/psychic-homily-stage"
                echo "Please run on VPS: sudo usermod -aG sudo deploy"
                echo "And add to /etc/sudoers: deploy ALL=(ALL) NOPASSWD: /bin/mkdir, /bin/chown"
                exit 1
              }
            else
              # Directory exists, just ensure subdirectories exist
              mkdir -p /opt/psychic-homily-stage/{scripts,db/migrations,backups}
            fi

      - name: Upload Configuration Files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "backend/docker-compose.stage.yml,backend/.env.stage,backend/scripts/deploy-stage.sh,backend/systemd/psychic-homily-stage.service,backend/db/migrations"
          target: "/opt/psychic-homily-stage"
          strip_components: 1

      - name: Setup Stage Services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Make scripts executable
            chmod +x /opt/psychic-homily-stage/scripts/deploy-stage.sh
            
            # Install systemd service if not exists
            if [ ! -f /etc/systemd/system/psychic-homily-stage.service ]; then
              sudo cp /opt/psychic-homily-stage/psychic-homily-stage.service /etc/systemd/system/
              sudo systemctl daemon-reload
              echo "Stage systemd service installed"
            fi

      - name: Clean Previous Binary
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/psychic-homily-stage
            rm -f psychic-homily-stage
            exit 0

      - name: Upload Binary
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "backend/psychic-homily-stage"
          target: "/opt/psychic-homily-stage"

      - name: Deploy with Zero-Downtime
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/psychic-homily-stage
            ./scripts/deploy-stage.sh ${{ github.sha }}

      - name: Wait for Backend Health
        run: |
          echo "‚è≥ Waiting for stage backend to be healthy..."
          sleep 30  # Give backend time to fully stabilize

      - name: Verify Backend Health
        run: |
          echo "üè• Verifying stage backend health..."
          echo "‚úÖ Stage backend deployment completed successfully"

  # Stage 2: Frontend Stage Deployment (only after backend is ready)
  deploy-frontend-stage:
    runs-on: ubuntu-latest
    needs: deploy-backend-stage
    steps:
      - name: Wait for Backend Stabilization
        run: |
          echo "‚è≥ Waiting for stage backend to fully stabilize..."
          sleep 60  # Additional wait to ensure backend is fully ready

      - name: Trigger Netlify Stage Build
        run: |
          echo "üöÄ Triggering frontend stage deployment on Netlify..."
          if [ -z "$NETLIFY_STAGE_WEBHOOK" ]; then
            echo "‚ùå NETLIFY_STAGE_WEBHOOK secret not set"
            echo "Please add the Netlify build hook URL to GitHub repository secrets"
            exit 1
          fi
          curl -X POST -d '{}' "$NETLIFY_STAGE_WEBHOOK"
        env:
          NETLIFY_STAGE_WEBHOOK: ${{ secrets.NETLIFY_STAGE_WEBHOOK }}

      - name: Wait for Frontend Deployment
        run: |
          echo "‚è≥ Waiting for frontend stage deployment to complete..."
          sleep 120  # Netlify typically takes 1-2 minutes

      - name: Verify Frontend Deployment
        run: |
          echo "‚úÖ Frontend stage deployment completed successfully"
