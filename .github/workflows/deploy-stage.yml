name: Deploy to Stage

on:
  push:
    branches: [main]

jobs:
  # Stage 1: Backend Stage Deployment
  deploy-backend-stage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Build Binary
        working-directory: ./backend
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-w -s" \
            -o psychic-homily-stage \
            ./cmd/server

      - name: Setup Stage Infrastructure
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Check if directory exists and try to create without sudo first
            if [ ! -d /opt/psychic-homily-stage ]; then
              # Try without sudo first
              mkdir -p /opt/psychic-homily-stage/{scripts,db/migrations,backups} 2>/dev/null || {
                # If that fails, we need sudo - configure passwordless sudo for deploy user
                echo "Need sudo access to create /opt/psychic-homily-stage"
                echo "Please run on VPS: sudo usermod -aG sudo deploy"
                echo "And add to /etc/sudoers: deploy ALL=(ALL) NOPASSWD: /bin/mkdir, /bin/chown"
                exit 1
              }
            else
              # Directory exists, just ensure subdirectories exist
              mkdir -p /opt/psychic-homily-stage/{scripts,db/migrations,backups}
            fi

      - name: Upload Configuration Files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "backend/docker-compose.stage.yml,backend/.env.stage,backend/scripts/deploy-stage.sh,backend/systemd/psychic-homily-stage.service,backend/db/migrations"
          target: "/opt/psychic-homily-stage"
          strip_components: 1

      - name: Setup Stage Services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Make scripts executable
            chmod +x /opt/psychic-homily-stage/scripts/deploy-stage.sh

            # Install systemd service if not exists
            if [ ! -f /etc/systemd/system/psychic-homily-stage.service ]; then
              sudo cp /opt/psychic-homily-stage/psychic-homily-stage.service /etc/systemd/system/
              sudo systemctl daemon-reload
              echo "Stage systemd service installed"
            fi

      - name: Clean Previous Binary
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/psychic-homily-stage
            rm -f psychic-homily-stage
            exit 0

      - name: Upload Binary
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "backend/psychic-homily-stage"
          target: "/opt/psychic-homily-stage"

      - name: Deploy with Zero-Downtime
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/psychic-homily-stage
            ./scripts/deploy-stage.sh ${{ github.sha }}

      - name: Wait for Backend Health
        run: |
          echo "⏳ Waiting for stage backend to be healthy..."
          sleep 30

      - name: Verify Backend Health
        run: |
          echo "🏥 Verifying stage backend health..."
          curl -f https://stage.api.psychichomily.com/health || exit 1
          echo "✅ Stage backend deployment completed successfully"

  # Stage 2: Frontend Stage Deployment (only after backend is ready)
  deploy-frontend-stage:
    runs-on: ubuntu-latest
    needs: deploy-backend-stage
    steps:
      - name: Wait for Backend Stabilization
        run: |
          echo "⏳ Waiting for stage backend to fully stabilize..."
          sleep 30  # Reduced from 60s since backend already had 30s + deploy time

      - name: Trigger Netlify Stage Build
        id: trigger_netlify
        run: |
          echo "🚀 Triggering frontend stage deployment on Netlify..."
          if [ -z "$NETLIFY_STAGE_WEBHOOK" ]; then
            echo "❌ NETLIFY_STAGE_WEBHOOK secret not set"
            echo "Please add the Netlify build hook URL to GitHub repository secrets"
            exit 1
          fi

          # Trigger build and capture response
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"trigger_title\":\"Stage Deploy - Commit ${{ github.sha }}\", \"trigger_branch\":\"main\"}" \
            "$NETLIFY_STAGE_WEBHOOK")

          # Check if webhook succeeded
          if [ $? -eq 0 ]; then
            echo "✅ Netlify build triggered successfully"
            echo "Response: $response"
            
            # Try to extract deploy ID if available (some webhooks return it)
            deploy_id=$(echo "$response" | jq -r '.id // empty' 2>/dev/null || echo "")
            if [ -n "$deploy_id" ]; then
              echo "📝 Deploy ID: $deploy_id"
              echo "deploy_id=$deploy_id" >> $GITHUB_OUTPUT
            else
              echo "deploy_id=" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Netlify webhook request failed"
            exit 1
          fi
        env:
          NETLIFY_STAGE_WEBHOOK: ${{ secrets.NETLIFY_STAGE_WEBHOOK }}

      - name: Check Netlify Deploy Status
        run: |
          echo "🔍 Monitoring Netlify deployment status..."

          deploy_id="${{ steps.trigger_netlify.outputs.deploy_id }}"
          max_attempts=60  # ~20 minutes with 20s intervals (increased from 40)
          attempt=0
          last_status=""
          consecutive_failures=0
          max_consecutive_failures=3

          if [ -n "$deploy_id" ] && [ -n "$NETLIFY_TOKEN" ]; then
            echo "🎯 Tracking specific deploy: $deploy_id"
            
            # Method 1: Track specific deploy by ID
            while [ $attempt -lt $max_attempts ]; do
              echo "📊 Checking deploy status (attempt $((attempt + 1))/$max_attempts)..."
              
              deploy_info=$(curl -s -H "Authorization: Bearer $NETLIFY_TOKEN" \
                "https://api.netlify.com/api/v1/deploys/$deploy_id" 2>/dev/null)
              
              if [ $? -eq 0 ] && [ -n "$deploy_info" ]; then
                status=$(echo "$deploy_info" | jq -r '.state // "unknown"')
                context=$(echo "$deploy_info" | jq -r '.context // "unknown"')
                error_message=$(echo "$deploy_info" | jq -r '.error_message // ""')
                
                echo "  Status: $status"
                echo "  Context: $context"
                
                # Check for consecutive failures (only count actual error states)
                if [ "$status" = "$last_status" ] && [ "$status" = "error" ]; then
                  ((consecutive_failures++))
                  echo "  ⚠️ Consecutive failures: $consecutive_failures/$max_consecutive_failures"
                else
                  consecutive_failures=0
                fi
                
                # Exit if too many consecutive failures
                if [ $consecutive_failures -ge $max_consecutive_failures ]; then
                  echo "❌ Too many consecutive failures, aborting deployment"
                  exit 1
                fi
                
                last_status="$status"
                
                case $status in
                  "ready")
                    echo "✅ Netlify deployment completed successfully!"
                    break
                    ;;
                  "error"|"failed")
                    echo "❌ Netlify deployment failed!"
                    if [ -n "$error_message" ]; then
                      echo "Error: $error_message"
                    else
                      echo "No detailed error message available"
                    fi
                    exit 1
                    ;;
                  "building"|"enqueued"|"preparing"|"processing"|"starting up")
                    echo "  ⏳ Deployment in progress..."
                    echo "  📝 Note: 'enqueued' can last several minutes due to infrastructure capacity"
                    
                    # Check if we've been stuck in this state too long (increased from 35 to 45 attempts)
                    # This accounts for Netlify's real-world infrastructure conditions where builds can queue
                    if [ $attempt -gt 45 ] && [ "$status" = "$last_status" ]; then
                      echo "  ⚠️ Deployment seems stuck in $status state for a while"
                      echo "  🔍 Checking for potential issues..."
                      
                      # Try to get more details about the deploy
                      deploy_details=$(curl -s -H "Authorization: Bearer $NETLIFY_TOKEN" \
                        "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys/$deploy_id" 2>/dev/null)
                      
                      if [ $? -eq 0 ] && [ -n "$deploy_details" ]; then
                        deploy_ready=$(echo "$deploy_details" | jq -r '.ready // false')
                        deploy_error=$(echo "$deploy_details" | jq -r '.error_message // "none"')
                        deploy_created=$(echo "$deploy_details" | jq -r '.created_at // "unknown"')
                        
                        echo "  🔍 Deploy details:"
                        echo "    - Ready: $deploy_ready"
                        echo "    - Error: $deploy_error"
                        echo "    - Created: $deploy_created"
                        
                        # Only exit if there's an actual error message
                        if [ "$deploy_error" != "none" ] && [ "$deploy_error" != "" ]; then
                          echo "❌ Deploy has error: $deploy_error"
                          exit 1
                        fi
                        
                        # If no error and still building, give it more time
                        echo "  ⏳ No errors detected, continuing to wait for build completion..."
                        echo "  📊 This is normal for Netlify builds that may queue due to infrastructure capacity"
                      fi
                    fi
                    ;;
                  "new")
                    echo "  📋 Deploy built successfully but not yet published"
                    echo "  🔍 Checking if deploy is ready for publishing..."
                    
                    # Check if deploy is actually ready for publishing
                    deploy_details=$(curl -s -H "Authorization: Bearer $NETLIFY_TOKEN" \
                      "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys/$deploy_id" 2>/dev/null)
                    
                    if [ $? -eq 0 ] && [ -n "$deploy_details" ]; then
                      deploy_state=$(echo "$deploy_details" | jq -r '.state // "unknown"')
                      deploy_ready=$(echo "$deploy_details" | jq -r '.ready // false')
                      deploy_error=$(echo "$deploy_details" | jq -r '.error_message // "none"')
                      
                      echo "  🔍 Deploy details:"
                      echo "    - State: $deploy_state"
                      echo "    - Ready: $deploy_ready"
                      echo "    - Error: $deploy_error"
                      
                      # Only exit if there's an actual error message
                      if [ "$deploy_error" != "none" ] && [ "$deploy_error" != "" ]; then
                        echo "❌ Deploy has error: $deploy_error"
                        exit 1
                      fi
                      
                      # Only try to publish if deploy is actually ready
                      if [ "$deploy_ready" = "true" ] || [ "$deploy_state" = "ready" ]; then
                        echo "  🚀 Deploy is ready, force publishing for stage environment..."
                        
                        # Force publish the deploy using the restore endpoint
                        echo "  🔍 Attempting to force publish deploy $deploy_id..."
                        echo "  📍 Site ID: $NETLIFY_SITE_ID"
                        echo "  🔑 Token: ${NETLIFY_TOKEN:0:10}..."
                        
                        # Make the API call with detailed error handling
                        publish_result=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -X POST \
                          -H "Authorization: Bearer $NETLIFY_TOKEN" \
                          -H "Content-Type: application/json" \
                          "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys/$deploy_id/restore" 2>&1)
                        
                        # Extract HTTP status and response body
                        http_status=$(echo "$publish_result" | grep "HTTP_STATUS:" | cut -d: -f2)
                        response_body=$(echo "$publish_result" | grep -v "HTTP_STATUS:")
                        
                        echo "  📊 HTTP Status: $http_status"
                        echo "  📄 Response: $response_body"
                        
                        if [ "$http_status" = "200" ] || [ "$http_status" = "201" ]; then
                          echo "  ✅ Deploy force-published successfully!"
                          echo "  ⏳ Waiting for publish to complete..."
                          sleep 10  # Give it time to propagate
                          
                          # Verify the publish actually worked
                          echo "  🔍 Verifying publish status..."
                          verify_result=$(curl -s -H "Authorization: Bearer $NETLIFY_TOKEN" \
                            "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys/$deploy_id" 2>/dev/null)
                          
                          if [ $? -eq 0 ]; then
                            published_status=$(echo "$verify_result" | jq -r '.published_at // "null"')
                            if [ "$published_status" != "null" ]; then
                              echo "  ✅ Publish verified - deploy is now live!"
                            else
                              echo "  ⚠️ Publish may not have completed - published_at is null"
                            fi
                          else
                            echo "  ⚠️ Could not verify publish status"
                          fi
                        else
                          echo "  ❌ Failed to force-publish deploy!"
                          echo "  🔍 Debug info:"
                          echo "    - HTTP Status: $http_status"
                          echo "    - Response: $response_body"
                          echo "    - Deploy ID: $deploy_id"
                          echo "    - Site ID: $NETLIFY_SITE_ID"
                          
                          # Try alternative approach with more verbose curl
                          echo "  🔄 Attempting alternative publish method..."
                          alt_result=$(curl -v -X POST \
                            -H "Authorization: Bearer $NETLIFY_TOKEN" \
                            -H "Content-Type: application/json" \
                            "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys/$deploy_id/restore" 2>&1)
                          
                          echo "  📋 Alternative method result:"
                          echo "$alt_result"
                        fi
                      else
                        echo "  ⏳ Deploy not ready for publishing yet, waiting..."
                        echo "  📊 Current state: $deploy_state, Ready: $deploy_ready"
                        
                        # Wait a bit longer for the deploy to become ready
                        sleep 30
                        continue  # Continue the loop to check again
                      fi
                    else
                      echo "  ⚠️ Could not fetch deploy details, waiting..."
                      sleep 20
                      continue
                    fi
                    ;;
                  *)
                    echo "  ⚠️ Unknown status: $status"
                    ;;
                esac
              else
                echo "  ⚠️ Failed to fetch deploy status, trying site-level check..."
                break
              fi
              
              if [ $attempt -eq $((max_attempts - 1)) ]; then
                echo "❌ Deployment status check timed out"
                exit 1
              fi
              
              sleep 20
              ((attempt++))
            done
            
          elif [ -n "$NETLIFY_TOKEN" ] && [ -n "$NETLIFY_SITE_ID" ]; then
            echo "🔍 Checking site-level deployment status..."
            
            # Method 2: Check latest deploy for the site
            while [ $attempt -lt $max_attempts ]; do
              echo "📊 Checking latest deploy (attempt $((attempt + 1))/$max_attempts)..."
              
              site_deploys=$(curl -s -H "Authorization: Bearer $NETLIFY_TOKEN" \
                "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys?per_page=1" 2>/dev/null)
              
              if [ $? -eq 0 ] && [ -n "$site_deploys" ]; then
                latest_deploy=$(echo "$site_deploys" | jq -r '.[0]')
                status=$(echo "$latest_deploy" | jq -r '.state // "unknown"')
                deploy_id=$(echo "$latest_deploy" | jq -r '.id // ""')
                commit_sha=$(echo "$latest_deploy" | jq -r '.commit_sha // ""')
                error_message=$(echo "$latest_deploy" | jq -r '.error_message // ""')
                
                echo "  Status: $status"
                echo "  Commit: ${commit_sha:0:8}"
                
                # Only exit if there's an actual error message
                if [ -n "$error_message" ] && [ "$error_message" != "" ]; then
                  echo "❌ Latest deployment has error: $error_message"
                  exit 1
                fi
                
                case $status in
                  "ready")
                    echo "✅ Latest deployment is ready!"
                    break
                    ;;
                  "error"|"failed")
                    echo "❌ Latest deployment failed!"
                    exit 1
                    ;;
                  "building"|"enqueued"|"preparing"|"processing"|"starting up")
                    echo "  ⏳ Deployment in progress..."
                    echo "  📝 Note: 'enqueued' can last several minutes due to infrastructure capacity"
                    ;;
                  "new")
                    if [ -n "$deploy_id" ]; then
                      echo "  📋 Deploy built but not published, checking if ready for publishing..."
                      
                      # Check if deploy is actually ready for publishing
                      deploy_details=$(curl -s -H "Authorization: Bearer $NETLIFY_TOKEN" \
                        "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys/$deploy_id" 2>/dev/null)
                      
                      if [ $? -eq 0 ] && [ -n "$deploy_details" ]; then
                        deploy_state=$(echo "$deploy_details" | jq -r '.state // "unknown"')
                        deploy_ready=$(echo "$deploy_details" | jq -r '.ready // false')
                        deploy_error=$(echo "$deploy_details" | jq -r '.error_message // "none"')
                        
                        echo "  🔍 Deploy details:"
                        echo "    - State: $deploy_state"
                        echo "    - Ready: $deploy_ready"
                        echo "    - Error: $deploy_error"
                        
                        # Only exit if there's an actual error message
                        if [ "$deploy_error" != "none" ] && [ "$deploy_error" != "" ]; then
                          echo "❌ Deploy has error: $deploy_error"
                          exit 1
                        fi
                        
                        # Only try to publish if deploy is actually ready
                        if [ "$deploy_ready" = "true" ] || [ "$deploy_state" = "ready" ]; then
                          echo "  🚀 Deploy is ready, attempting to force publish..."
                          
                          site_publish_result=$(curl -s -w "\nHTTP_STATUS:%{http_code}\n" -X POST \
                            -H "Authorization: Bearer $NETLIFY_TOKEN" \
                            -H "Content-Type: application/json" \
                            "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys/$deploy_id/restore" 2>&1)
                          
                          site_http_status=$(echo "$site_publish_result" | grep "HTTP_STATUS:" | cut -d: -f2)
                          site_response_body=$(echo "$site_publish_result" | grep -v "HTTP_STATUS:")
                          
                          echo "  📊 Site-level publish HTTP Status: $site_http_status"
                          echo "  📄 Site-level publish Response: $site_response_body"
                          
                          if [ "$site_http_status" = "200" ] || [ "$site_http_status" = "201" ]; then
                            echo "  ✅ Site-level force publish successful!"
                          else
                            echo "  ❌ Site-level force publish failed!"
                            echo "  🔍 Debug info:"
                            echo "    - HTTP Status: $site_http_status"
                            echo "    - Response: $site_response_body"
                            echo "    - Deploy ID: $deploy_id"
                          fi
                        else
                          echo "  ⏳ Deploy not ready for publishing yet, waiting..."
                          echo "  📊 Current state: $deploy_state, Ready: $deploy_ready"
                          
                          # Wait a bit longer for the deploy to become ready
                          sleep 30
                          continue  # Continue the loop to check again
                        fi
                      else
                        echo "  ⚠️ Could not fetch deploy details, waiting..."
                        sleep 20
                        continue
                      fi
                    fi
                    ;;
                esac
              else
                echo "  ⚠️ Failed to fetch site deploys"
              fi
              
              if [ $attempt -eq $((max_attempts - 1)) ]; then
                echo "❌ Deployment status check timed out"
                exit 1
              fi
              
              sleep 20
              ((attempt++))
            done
            
          else
            echo "⚠️ No Netlify API access - using health check method..."
            
            # Method 3: Fallback to health checks
            while [ $attempt -lt $max_attempts ]; do
              echo "🔍 Health check (attempt $((attempt + 1))/$max_attempts)..."
              
              if curl -f -s -H "Cache-Control: no-cache" \
                -H "User-Agent: GitHub-Actions-Deploy-Check" \
                "https://stage-psychic-homily.netlify.app/" > /dev/null 2>&1; then
                echo "  ✅ Frontend is responding!"
                
                # Wait a reasonable amount before declaring success
                if [ $attempt -gt 8 ]; then
                  echo "✅ Frontend deployment appears successful!"
                  break
                fi
              else
                echo "  ⚠️ Frontend not responding yet..."
              fi
              
              if [ $attempt -eq $((max_attempts - 1)) ]; then
                echo "❌ Frontend health check timed out"
                exit 1
              fi
              
              sleep 20
              ((attempt++))
            done
          fi
        env:
          NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Verify Frontend Deployment
        run: |
          echo "🌐 Final frontend verification..."

          # Test the actual frontend URL
          if curl -f -s -H "Cache-Control: no-cache" "https://stage-psychic-homily.netlify.app/" > /dev/null; then
            echo "✅ Frontend is accessible and responding!"
            
            # Optional: Check for specific content to verify it's updated
            response=$(curl -s "https://stage-psychic-homily.netlify.app/" | head -20)
            if echo "$response" | grep -q "html\|HTML" 2>/dev/null; then
              echo "✅ Frontend content looks valid!"
            else
              echo "⚠️ Frontend responding but content may be incomplete"
            fi
          else
            echo "❌ Frontend verification failed - site not accessible"
            exit 1
          fi

          echo "✅ Frontend stage deployment completed successfully"

      - name: Send Deployment Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Stage deployment completed successfully!"
            echo "📱 Backend: https://api.psychichomily.com/health"
            echo "🌐 Frontend: https://stage-psychic-homily.netlify.app"
            
            # Optional: Send to Slack if webhook is configured
            if [ -n "$SLACK_WEBHOOK" ]; then
              curl -X POST -H 'Content-type: application/json' \
                --data '{"text":"🎉 Stage deployment completed successfully!\n• Backend: https://api.psychichomily.com/health\n• Frontend: https://stage-psychic-homily.netlify.app\n• Commit: ${{ github.sha }}"}' \
                "$SLACK_WEBHOOK" 2>/dev/null || echo "Slack notification failed"
            fi
          else
            echo "❌ Stage deployment failed"
            
            # Optional: Send failure notification to Slack
            if [ -n "$SLACK_WEBHOOK" ]; then
              curl -X POST -H 'Content-type: application/json' \
                --data '{"text":"❌ Stage deployment failed!\n• Commit: ${{ github.sha }}\n• Check GitHub Actions for details"}' \
                "$SLACK_WEBHOOK" 2>/dev/null || echo "Slack notification failed"
            fi
          fi
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
