version: '3.9'

services:
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - "${API_PORT:-8080}:8080"
  #   env_file:
  #     - .env.development
  #   environment:
  #     - API_ADDR=0.0.0.0:8080 # Override for Docker
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     migrate:
  #       condition: service_completed_successfully
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--no-verbose",
  #         "--tries=1",
  #         "--spider",
  #         "http://localhost:8080/health",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   networks:
  #     - app-network

  db:
    image: postgres:17.5
    restart: always
    env_file:
      - .env.development
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  migrate:
    image: migrate/migrate:latest
    command:
      [
        '-path',
        '/migrations',
        '-database',
        'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable',
        'up',
      ]
    env_file:
      - .env.development
    volumes:
      - ./db/migrations:/migrations
    depends_on:
      db:
        condition: service_healthy
    restart: 'no'
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    env_file:
      - .env.development
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - '8081:80'
    depends_on:
      - db
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
